{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst initialState = {\n  users: [],\n  filteredUsers: [],\n  filters: {\n    name: \"\",\n    username: \"\",\n    email: \"\",\n    phone: \"\"\n  },\n  status: \"idle\",\n  error: null\n};\n\n// Fetch users from API\nexport const fetchUsers = createAsyncThunk(\"users/fetchUsers\", async () => {\n  const response = await axios.get(\"https://jsonplaceholder.typicode.com/users\");\n  return response.data;\n});\nconst usersSlice = createSlice({\n  name: \"users\",\n  initialState,\n  reducers: {\n    setFilter(state, action) {\n      state.filters[action.payload.key] = action.payload.value;\n      state.filteredUsers = state.users.filter(user => Object.keys(state.filters).every(key => user[key].toString().toLowerCase().includes(state.filters[key].toLowerCase())));\n    }\n  },\n  extraReducers(builder) {\n    builder.addCase(fetchUsers.pending, state => {\n      state.status = \"loading\";\n    }).addCase(fetchUsers.fulfilled, (state, action) => {\n      state.status = \"succeeded\";\n      state.users = action.payload;\n      state.filteredUsers = action.payload;\n    }).addCase(fetchUsers.rejected, (state, action) => {\n      state.status = \"failed\";\n      state.error = action.error.message || \"Failed to fetch users\";\n    });\n  }\n});\nexport const {\n  setFilter\n} = usersSlice.actions;\nexport default usersSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","initialState","users","filteredUsers","filters","name","username","email","phone","status","error","fetchUsers","response","get","data","usersSlice","reducers","setFilter","state","action","payload","key","value","filter","user","Object","keys","every","toString","toLowerCase","includes","extraReducers","builder","addCase","pending","fulfilled","rejected","message","actions","reducer"],"sources":["C:/Users/Sa4ok/PROBA/user-management/src/users/usersSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\n\r\ninterface User {\r\n  id: number;\r\n  name: string;\r\n  username: string;\r\n  email: string;\r\n  phone: string;\r\n}\r\n\r\ninterface UsersState {\r\n  users: User[];\r\n  filteredUsers: User[];\r\n  filters: {\r\n    name: string;\r\n    username: string;\r\n    email: string;\r\n    phone: string;\r\n  };\r\n  status: \"idle\" | \"loading\" | \"succeeded\" | \"failed\";\r\n  error: string | null;\r\n}\r\n\r\nconst initialState: UsersState = {\r\n  users: [],\r\n  filteredUsers: [],\r\n  filters: {\r\n    name: \"\",\r\n    username: \"\",\r\n    email: \"\",\r\n    phone: \"\",\r\n  },\r\n  status: \"idle\",\r\n  error: null,\r\n};\r\n\r\n// Fetch users from API\r\nexport const fetchUsers = createAsyncThunk(\"users/fetchUsers\", async () => {\r\n  const response = await axios.get(\r\n    \"https://jsonplaceholder.typicode.com/users\"\r\n  );\r\n  return response.data as User[];\r\n});\r\n\r\nconst usersSlice = createSlice({\r\n  name: \"users\",\r\n  initialState,\r\n  reducers: {\r\n    setFilter(\r\n      state,\r\n      action: PayloadAction<{ key: keyof UsersState[\"filters\"]; value: string }>\r\n    ) {\r\n      state.filters[action.payload.key] = action.payload.value;\r\n      state.filteredUsers = state.users.filter((user) =>\r\n        Object.keys(state.filters).every((key) =>\r\n          user[key as keyof User]\r\n            .toString()\r\n            .toLowerCase()\r\n            .includes(\r\n              state.filters[key as keyof UsersState[\"filters\"]].toLowerCase()\r\n            )\r\n        )\r\n      );\r\n    },\r\n  },\r\n  extraReducers(builder) {\r\n    builder\r\n      .addCase(fetchUsers.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(fetchUsers.fulfilled, (state, action: PayloadAction<User[]>) => {\r\n        state.status = \"succeeded\";\r\n        state.users = action.payload;\r\n        state.filteredUsers = action.payload;\r\n      })\r\n      .addCase(fetchUsers.rejected, (state, action) => {\r\n        state.status = \"failed\";\r\n        state.error = action.error.message || \"Failed to fetch users\";\r\n      });\r\n  },\r\n});\r\n\r\nexport const { setFilter } = usersSlice.actions;\r\nexport default usersSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAuB,kBAAkB;AAC/E,OAAOC,KAAK,MAAM,OAAO;AAuBzB,MAAMC,YAAwB,GAAG;EAC/BC,KAAK,EAAE,EAAE;EACTC,aAAa,EAAE,EAAE;EACjBC,OAAO,EAAE;IACPC,IAAI,EAAE,EAAE;IACRC,QAAQ,EAAE,EAAE;IACZC,KAAK,EAAE,EAAE;IACTC,KAAK,EAAE;EACT,CAAC;EACDC,MAAM,EAAE,MAAM;EACdC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,GAAGZ,gBAAgB,CAAC,kBAAkB,EAAE,YAAY;EACzE,MAAMa,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAC9B,4CACF,CAAC;EACD,OAAOD,QAAQ,CAACE,IAAI;AACtB,CAAC,CAAC;AAEF,MAAMC,UAAU,GAAGjB,WAAW,CAAC;EAC7BO,IAAI,EAAE,OAAO;EACbJ,YAAY;EACZe,QAAQ,EAAE;IACRC,SAASA,CACPC,KAAK,EACLC,MAA0E,EAC1E;MACAD,KAAK,CAACd,OAAO,CAACe,MAAM,CAACC,OAAO,CAACC,GAAG,CAAC,GAAGF,MAAM,CAACC,OAAO,CAACE,KAAK;MACxDJ,KAAK,CAACf,aAAa,GAAGe,KAAK,CAAChB,KAAK,CAACqB,MAAM,CAAEC,IAAI,IAC5CC,MAAM,CAACC,IAAI,CAACR,KAAK,CAACd,OAAO,CAAC,CAACuB,KAAK,CAAEN,GAAG,IACnCG,IAAI,CAACH,GAAG,CAAe,CACpBO,QAAQ,CAAC,CAAC,CACVC,WAAW,CAAC,CAAC,CACbC,QAAQ,CACPZ,KAAK,CAACd,OAAO,CAACiB,GAAG,CAAgC,CAACQ,WAAW,CAAC,CAChE,CACJ,CACF,CAAC;IACH;EACF,CAAC;EACDE,aAAaA,CAACC,OAAO,EAAE;IACrBA,OAAO,CACJC,OAAO,CAACtB,UAAU,CAACuB,OAAO,EAAGhB,KAAK,IAAK;MACtCA,KAAK,CAACT,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDwB,OAAO,CAACtB,UAAU,CAACwB,SAAS,EAAE,CAACjB,KAAK,EAAEC,MAA6B,KAAK;MACvED,KAAK,CAACT,MAAM,GAAG,WAAW;MAC1BS,KAAK,CAAChB,KAAK,GAAGiB,MAAM,CAACC,OAAO;MAC5BF,KAAK,CAACf,aAAa,GAAGgB,MAAM,CAACC,OAAO;IACtC,CAAC,CAAC,CACDa,OAAO,CAACtB,UAAU,CAACyB,QAAQ,EAAE,CAAClB,KAAK,EAAEC,MAAM,KAAK;MAC/CD,KAAK,CAACT,MAAM,GAAG,QAAQ;MACvBS,KAAK,CAACR,KAAK,GAAGS,MAAM,CAACT,KAAK,CAAC2B,OAAO,IAAI,uBAAuB;IAC/D,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEpB;AAAU,CAAC,GAAGF,UAAU,CAACuB,OAAO;AAC/C,eAAevB,UAAU,CAACwB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}